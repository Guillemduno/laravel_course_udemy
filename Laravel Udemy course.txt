=============
INSTALLATION
=============
- Download Wamp
- Enable to use PHP in the command line:
    - Add the PATH to the PHP binary in the sistem path enviorment
        - In Windows 
            -> Advanced sytem settings
            -> Enviroments variables button
                -> Edit the PATH
                -> Move to the top
                -> Save
                
- Download Composer

======
Tips
======
// Obre un projecte al Visual Studio Code. des de la consola de comandes.
    code . 

// Command pallete shortcut:
ctrl+shift+P

//Format document shortcut
shift+alt+F


=======
Artisan
=======

// LListat de tots les comandes de artisan
php artisan

// Crear un command
php artisan make:command SendMails

=======
Tinker
=======
´
// Permet interactuar amb l'aplicació a través de la línea de comandes.
php artisan tinker

// Start de server
php artisan serve

// Stop de server
ctrl + c


===========
Routes
=========

URI (Uniform Resource Identifier)
    - String identifier that refers to a resource on internet using location, name or both
    URI has to subsets:
     - URL (Uniform Resource Locator)
     - URN (Uniform Resource Number)    

php artisan route:list

// Es pot definir una restricció general per totes les rutes que la variable s'anomeni 'x' desde l'arxiu 
// RouteServiceProvider.php

 Route::pattern('id', '[0-9]+');

// Permet mostrar un missatge elegant de not found, si el valor que li passem del arry no existeix.
  abort_if(!isset($posts[$id]), 404);

Routes can be grouped
Grouped reoutes share attributes:
    URL prefix
    Name prefix
    Middleware

Example: 
Route::prefix('/fun')->name('fun.')->group(function() use($users){
    //Route 1
    //Route 2...
});

=============
Condicionals
============
@extends('layouts.app')

@section('title', $post['title'])

@if ($post['is_new'])
    <div>A new blog post! Using if</div>
@elseif(!$post['is_new'])
    <div>Blog post is old!</div>
@else
@endif

// @unless()
// La condició ha de ser falsa.
// No hi ha alternatives.

	@unless($post['is_new'])
	@endunless()

// @isset()
// S'ha definit una variable o un array

	@isset($post['is_new'])
	@endisset


// @empty()
// És fals, 0 o és un array buit.

	@empty($post['is_new']) 
	@endempty

// @forelse
// És el mateix que utilitzar @if() i @foreach() junts

	@forelse ($collection as $item)
	@empty 
	@endforelse

@break
@continue


===========
Middleware
===========

Runs before and after the controller

Runs before the request reaches the controller
Examples: 
    Verify if user is authentificated
    logger middleware

Runs after the request reaches the controller
Examples:
    Add headers to response (CORS)
    Add content to response (eg. extra JSON)


===================
Resource Controller
===================

// Crea el controlador amb els mètodes CRUD
php artisan make:controller PostController --resource

// Crea la ruta cap el controlador
Route::resource('/posts', PostController::class);

// Si no volem utilitzar tots el mètodes podem utilitzar els mètodes only() o except()
Route::resource('posts', PostController::class)->only(['index', 'show']);
Route::resource('posts', PostController::class)->except(['create']);



===============================
CONFIGURING DATABASE CONNECTION
===============================
Default Collation:
utf8mb4 - utf8mb4_general_ci


===============================
CREATING AND RUNNING MIGRATIONS
===============================

// Crea un model i la migració al mateix temps.
php artisan make:model BlogPost -m

php artisan migrate
php artisan migrate:rollback

Available Column Types
$table->year('any_naixament');
$table->string('nom');

Create a migration for a unique file
    php artisan migrate --path=database/migrations/2022_04_16_145059_create_books_table.php

============================================
CREATING AND UPDATING INTRODUCCION TO TINKER
============================================

php artisan tinker

use App\Models\BlogPost;

$post = new BlogPost();
$post->title = 'this is the title';
$post
$post->save()

BlogPost::find(1); // Find by id and returns true or false

BlogPost::findOrFail(1); return the values or an exception

$post->all(); 

// $post = BlogPost::all();

$post[0];
$post->first();
$post->count();

BlogPost::find([1, 2, 3]); // pass different id's

===================================
QUERY BUILDER
===================================
Create a factory file  
 php artisan make:factory BookFactory

User::factory()->count(5)->create();

User::where('id', '>=', '2')->orderBy('id', 'desc')->get()

BlogPost::orderBy('created_at', 'desc')->get()
// Limit items 
BlogPost::orderBy('created_at', 'desc')->take(5)->get()


===================================
Forms
===================================
1. Create a view for the form. Url Action to store() method of the controller
2. Return the view from the create methood of the controller
3. Add @csrf token for security


  $post = new BlogPost();
  $post->title = $request->input('title');
  $post->content = $request->input('content');
  $post->save();

  return redirect()->route('posts.show', ['post' => $post->id]);

  
===================================
Forms Validation
===================================

    $request->validate([
        'title' => 'bail|required|min:5|max:100',
        'content' => 'required|min:10'
    ]);

===================================
Forms Displaying Validation Errors
===================================

kernel.php / Middleware / shareErrorsFromSession::class

In the form template

SHOW ALL ERROR MESSAGES 
@if($errors->any())
<div>
    <ul>
        @foreach($errors->all() as $error)
            <li>{{$error}}</li>
        @endforeach
    </ul>
</div>
@endif

SHOW SPECIFIC ERROR MESSAGE
@error('email')
    <div>{{$message}}</div>
@enderror

===================================
Forms Validation / Make:request
===================================

php artisan make:request StoreUser

In this route is stored the request classes
App/Http/Request/StoreUser

In the class StoreUser
     - authorize method must be in true to let send the form
     - in the rules() method we put the array of validations

     return[
            'title' => 'bail|required|min:5|max:100',
            'year' => 'required',
            'pages' => 'required',
        ];


===================================
Flash Messages
===================================

Use session for sending messages between pages after form validation.

In the store method of the controller add:
$request->session()->flash('status', 'The user was created');

In the view:
 @if (session('status'))
    <div class="alert alert-success">
    {{session('status')}}
    </div>
@endif

When the page is refreshed de message is deleted.

===================================
Old Input Methood
===================================

Keep data in the form if the validation fail

In the input tag set the old() function in the value attribute passing the id of the input:
    value="{{old('user')}}"

===================================
Forms/Models Mass Assignment
===================================

Eloquent model provides mass assignment

In the model class must define fillable columns
    protected $fillable['column1', 'column2', etc...];


There are three ways to implement:
    - UserFamily::create(); // saves the model to database
        example: $user = UserFamily::create($validated);
    - UserFamily::make(); // don`t save the model to database
    - Fill()

===================================
Reuse a Form
===================================

1. Create a partial called form.blade.php
2. Copy the inputs to the new file
3. Include the partial to the create file
4. Create the edit file, copy the content from  the create file and modifiy it.
5. Pass the post variable to the update route
6. Define de PUT @methood 
7. In the edit methood from the PostController, define the returned view.

===================================
69. CRUD UPDATE
===================================
In the methood update from the PostController:

    // Update
    $post = BlogPost::findOrFail($id);
    $validated = $request->validated();
    $post->fill($validated);
    $post->save();

    // Message
    $request->session()->flash('status', 'Blog post was updated!');

    // Redirect
    return redirect()->route('posts.show', ['post' => $post->id]);

To delete a user:
    1. Create a form that sends the id in the view
       - Add @csrf
       - Add @method('DELETE)
       - Add inpute type button
    2. In the controller add to the destroy methood
        - in the second parameter Request $request
        - create a new instance of the model
            $user = UserFamily::findOrFail($id)
        - show flash message
        - redirect to other view.

===================================
73. INSTALLING BOOTSTRAP
===================================

1. composer require laravel/ui 3.0.0
2. php artisan ui bootstrap
3. php artisan ui:controllers // Authentification

===================================
74. NPM
===================================

All frontend libraries are configured in the package.json

1. npm install
2. npm run dev // compile all assets

===================================
75. INCLUDING ASSETS IN VIEWS
===================================

In the views layouts add
    <link rel="stylesheet" href="{{asset('css/app.css')}}">
    <script src="{{asset('js/app.js')}}" defer></script>

    defer: the browser won't wait to render the page for javascript

Get a unique hash to the assets
if(mix.inProduction()){
    mix.version();
}

Replace the asset helper for mix helper!!!
    <link rel="stylesheet" href="{{mix('css/app.css')}}">
    <script src="{{mix('js/app.js')}}" defer></script>


===================================
75. BASIC TESTING
===================================

Els testos es creen a la carpeta test, poden ser unitaris (unit) o de característiques (features).

Els testos s'executen des de la línia de comandes amb: vendor/bin/phpunit

Els testos es componen de tres parts: 
    1. Arrange (organitzar)
    2. Act (actuar)
    3. Assert (afirmar)


Per realitzar testos que intervingui la base de dades, cal crear-ne una paral·lela.

    1. Modificar l'arxiu phpunit.xml
        definir
        <server name="DB_CONNECTION" value="sqlite"/>
        <server name="DB_DATABASE" value=":memory:"/>
    2. Afegir connexió a l'arxiu database.php de la carpeta config
        'sqlite_testing' => [
                'driver' => 'sqlite',
                'database' => ':memory:',
            ],

    3. Netejar la cache
        php artisan config:clear


Per crear un arxiu de test nou: php artisan make:test HomeTest

Exemple de mètode de la classe HomeTest:

Els noms dels mètodes sempre han de començar per test!!!

  public function testHomePageIsWorkingCorrectly()
    {
        $response = $this->get('/');
        $response->assertSeeText('Hello World!!!');
        $response->assertSeeText('The current value is 1');
        $response->assertStatus(200);
    }


    S'ha d'utilitzar use RefreshDatabase; per crear la migració a la base de dades.

    'errors' is a global variable from laravel.

more...