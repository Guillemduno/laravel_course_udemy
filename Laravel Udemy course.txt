=============
INSTALLATION
=============
- Download Wamp
- Enable to use PHP in the command line:
    - Add the PATH to the PHP binary in the sistem path enviorment
        - In Windows 
            -> Advanced sytem settings
            -> Enviroments variables button
                -> Edit the PATH
                -> Move to the top
                -> Save
        


======
Tips
======
// Obre un projecte al Visual Studio Code. des de la consola de comandes.
    code . 

// Command pallete shortcut:
ctrl+shift+P

//Format document shortcut
shift+alt+F



=======
Artisan
=======

// LListat de tots les comandes de artisan
php artisan

// Crear un command
php artisan make:command SendMails

=======
Tinker
=======
´
// Permet interactuar amb l'aplicació a través de la línea de comandes.
php artisan tinker

// Start de server
php artisan serve

// Stop de server
ctrl + c


===========
Routes
=========

php artisan route:list

// Es pot definir una restricció general per totes les rutes que la variable s'anomeni 'x' desde l'arxiu 
// RouteServiceProvider.php

 Route::pattern('id', '[0-9]+');

// Permet mostrar un missatge elegant de not found, si el valor que li passem del arry no existeix.
  abort_if(!isset($posts[$id]), 404);

=============
Condicionals
============
@extends('layouts.app')

@section('title', $post['title'])

@if ($post['is_new'])
    <div>A new blog post! Using if</div>
@elseif(!$post['is_new'])
    <div>Blog post is old!</div>
@else
@endif

// @unless()
// La condició ha de ser falsa.
// No hi ha alternatives.

	@unless($post['is_new'])
	@endunless()

// @isset()
// S'ha definit una variable o un array

	@isset($post['is_new'])
	@endisset


// @empty()
// És fals, 0 o és un array buit.

	@empty($post['is_new']) 
	@endempty

// @forelse
// És el mateix que utilitzar @if() i @foreach() junts

	@forelse ($collection as $item)
	@empty 
	@endforelse

@break
@continue


===================
Resource Controller
===================

// Crea el controlador amb els mètodes CRUD
php artisan make:controller PostController --resource

// Crea la ruta cap el controlador
Route::resource('/posts, PostController::class);

// Si no volem utilitzar tots el mètodes podem utilitzar els mètodes only() o except()
Route::resource('posts', PostController::class)->only(['index', 'show']);
Route::resource('posts', PostController::class)->except(['create']);



===============================
CONFIGURING DATABASE CONNECTION
===============================
Default Collation:
utf8mb4 - utf8mb4_general_ci


===============================
CREATING AND RUNNING MIGRATIONS
===============================

// Crea un model i la migració al mateix temps.
php artisan make:model BlogPost -m

php artisan migrate
php artisan migrate:rollback

Available Column Types
$table->year('any_naixament');
$table->string('nom');

============================================
CREATING AND UPDATING INTRODUCCION TO TINKER
============================================

php artisan tinker

use App\Models\BlogPost;

$post = new BlogPost();
$post->title = 'this is the title';
$post
$post->save()

BlogPost::find(1); // returns true or false

BlogPost::findOrFail(1); return de values or an exception

$post->all(); 

// $post = BlogPost::all();

$post[0];
$post->first();
$post->count();

BlogPost::find([1, 2, 3]);

===================================
QUERY BUILDER
===================================
User::factory()->count(5)->create();

User::where('id', '>=', '2')->orderBy('id', 'desc')->get()

BlogPost::orderBy('created_at', 'desc')->get()
// Limit items 
BlogPost::orderBy('created_at', 'desc')->take(5)->get()


===================================
Forms
===================================

  $post = new BlogPost();
  $post->title = $request->input('title');
  $post->content = $request->input('content');
  $post->save();

  return redirect()->route('posts.show', ['post' => $post->id]);

  
===================================
Forms Validation
===================================

    $request->validate([
        'title' => 'bail|required|min:5|max:100',
        'content' => 'required|min:10'
    ]);

===================================
Forms Validation / Make:request
===================================

php artisan make:request StorePost

===================================
Reuse a Form
===================================

1. Create a partial called form.blade.php
2. Copy the inputs to the new file
3. Include the partial to the create file
4. Create the edit file, copy the content from  the create file and modifiy it.
5. Pass the post variable to the route
6. Define de PUT @methood 
7. In the edit methood from the PostController, define the returned view.

===================================
69. CRUD UPDATE
===================================
In the methood update from the PostController:

    // Update
    $post = BlogPost::findOrFail($id);
    $validated = $request->validated();
    $post->fill($validated);
    $post->save();

    // Message
    $request->session()->flash('status', 'Blog post was updated!');

    // Redirect
    return redirect()->route('posts.show', ['post' => $post->id]);

===================================
73. INSTALLING BOOTSTRAP
===================================

1. composer require laravel/ui 3.0.0
2. php artisan ui bootstrap
3. php artisan ui:controllers // Authentification

===================================
74. NPM
===================================

All frontend libraries are configured in the package.json

1. npm install
2. npm run dev // compile all assets

===================================
75. INCLUDING ASSETS IN VIEWS
===================================

<link rel="stylesheet" href="{{asset('css/app.css')}}">
<script src="{{asset('js/app.js')}}" defer></script>

defer: the browser won't wait to render de page for javascript


if(mix.inProduction()){
    mix.version();
}

===================================
75. BASIC TESTING
===================================

Els testos es creen a la carpeta test, poden ser unitaris (unit) o de característiques (features).

Els testos s'executen des de la línia de comandes amb: vendor/bin/phpunit

Els testos es componen de tres parts: 
    1. Arrange (organitzar)
    2. Act (actuar)
    3. Assert (afirmar)


Per realitzar testos que intervingui la base de dades, cal crear-ne una paral·lela.

    1. Modificar l'arxiu phpunit.xml
        definir
        <server name="DB_CONNECTION" value="sqlite"/>
        <server name="DB_DATABASE" value=":memory:"/>
    2. Afegir connexió a l'arxiu database.php de la carpeta config
        'sqlite_testing' => [
                'driver' => 'sqlite',
                'database' => ':memory:',
            ],

    3. Netejar la cache
        php artisan config:clear


Per crear un arxiu de test nou: php artisan make:test HomeTest

Exemple de mètode de la classe HomeTest:

Els noms dels mètodes sempre han de començar per test!!!

  public function testHomePageIsWorkingCorrectly()
    {
        $response = $this->get('/');
        $response->assertSeeText('Hello World!!!');
        $response->assertSeeText('The current value is 1');
        $response->assertStatus(200);
    }


    S'ha d'utilitzar use RefreshDatabase; per crear la migració a la base de dades.
